+-------------------------+
|        Objects          |
+-------------------------+
| +compare(...)           |
| +compareDeep(...)       |
| +deepEquals(...)        |
| +equals(...)            |
| +hashCode(...)          |
| +isNull(...)            |
| +nonNull(...)           |
| +requireNonNull(...)     |
| +requireNonNullElse(...)|
| +requireNonNullElseGet(..)|
| +requireNonNullElseThrow(..)|
| +toString(...)          |
| +checkIndex(...)        |
| +checkFromToIndex(...)  |
| +checkFromIndexSize(...)|
| +checkFromToIndexForLength(...)|
| +checkIndexForCoercionToBounds(...)|
| +checkPositionIndex(...) |
| +checkPositionIndexes(...)|
| +checkRange(...)        |
| +checkFromIndexSize(long, long, long)|
| +checkFromToIndexSize(long, long, long)|
| +checkIndexOverflow(long)|
| +isInstanceOf(Class<?>, Object)|
| +requireNonNullElements(...)|
| +requireNonNullElements(Object[], String)|
| +requireNonNullElements(Collection<?>, String)|
| +checkFromIndexSize(int, int)|
| +checkFromToIndex(int, int, int)|
| +checkIndex(int, int)    |
| ...                     |
+-------------------------+

1. compare(T a, T b, Comparator<? super T> c) :
 두 객체 a와 b를 비교합니다. 비교 방법은 Comparator 인터페이스를 구현한 c 객체에 의해 결정됩니다.

2. equals(Object a, Object b) :
 두 객체가 같은지를 비교합니다. a와 b가 모두 null이면 true를 반환합니다.


3. deepEquals(Object a, Object b) :
 메소드는 두 개의 객체가 다차원 배열이거나 객체 배열일 경우, 내부 배열의 모든 요소를 비교하여 같은지 확인합니다.
 다시 말해, 객체 배열이나 다차원 배열의 경우 내부 요소를 모두 재귀적으로 비교하여 내용이 같으면 true를 반환합니다.

4. hashCode(Object o) :
 객체 o의 해시 코드를 반환합니다. 객체의 값이 변경되지 않는 한, 객체의 해시 코드는 항상 일정합니다.

5. isNull(Object obj) :
 객체 obj가 null인지 확인하고, null인 경우 true를 반환합니다.

6. nonNull(Object obj) :
 객체 obj가 null이 아닌지 확인하고, null이 아닌 경우 true를 반환합니다.

7. requireNonNull(T obj, Supplier<String> messageSupplier) :
 obj가 null이 아님을 확인하고, null인 경우 지정한 메시지를 포함한 NullPointerException을 발생시킵니다.
 이때, 메시지를 생성하는 방법을 지정할 수 있습니다.
 예를 들어, 람다식을 이용하여 동적으로 메시지를 생성하는 방법도 가능합니다.

8. requireNonNullElse(T obj, T defaultObj) :
 obj가 null이 아닌 경우 obj를 반환하고, null인 경우 defaultObj를 반환합니다.

9. requireNonNullElseGet()T obj, Supplier<? extends T> supplier) :
 obj가 null이 아닌 경우 obj를 반환하고, null인 경우 supplier로부터 값을 생성하여 반환합니다.
 이때, supplier는 호출 시점에 실행됩니다.

10. isInstanceOf
  메소드는 java.util.Objects 클래스에 존재하지 않습니다.
  대신, 이 메소드는 자바의 객체 지향 프로그래밍 언어에서 클래스의 인스턴스 여부를 확인하는 데 사용됩니다.